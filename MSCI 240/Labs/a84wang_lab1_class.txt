package fractions;

/**
 * Author: Amy Wang
 * Date: September 17 2018
 * Assignment: Lab 1 Week 3
 * Desciption: Fraction class with various methods+constructors
 */

public class Fraction {
    private int numerator = 0;
    private int denominator = 1;

    public Fraction() {
        // do nothing
    }

    public Fraction(int numerator, int denominator) {
        setFraction(numerator, denominator);
    }

    /**
     * Takes a String value of the fraction and creates a Fraction object
     * @param fraction
     * 			Fraction of String type
     */
    public Fraction(String fraction) {
        if(fraction == "" || fraction == null) {
        	throw new UnsupportedOperationException();
        }
        String [] splitFraction = fraction.split("/"); //split based on "/"
        int numerator = Integer.parseInt(splitFraction[0]); //First part is numerator
        int denominator = Integer.parseInt(splitFraction[1]); //Second part is denominator
        setFraction(numerator,denominator);
    }

    public int getNumerator() {
        return numerator;
    }

    public void setNumerator(int value) {
        numerator = value;
    }

    public int getDenominator() {
        return denominator;
    }

    public void setDenominator(int value) {
        if (value == 0) {
            throw new IllegalArgumentException("denominator may not be zero");
        }
        denominator = value;
    }

    public void setFraction(int numerator, int denominator) {
        setNumerator(numerator);
        setDenominator(denominator);
    }

    //Returns a string value of the object
    public String toString() {
    	if(this.denominator==0) {
    		throw new UnsupportedOperationException();
    	}else {
    		 String fraction = this.numerator + "/" + this.denominator;
    	     return fraction;
    	}
       
    }

    /**
     * Return the value of the fraction as a double.
     *
     * @return value of fraction as a double
     */
    public double asDouble() {
    	//  Check if denominator is 0 (DNE)
    	if(denominator ==0) {
            throw new UnsupportedOperationException();
    	}
    	double numerator = this.getNumerator();
    	double denominator = this.getDenominator();
        double fraction = (numerator/denominator);
        return fraction;
    }

    /**
     * Adds two fractions and returns a new Fraction that is their sum.
     *
     * @param lhs
     *            left hand side of addition
     * @param rhs
     *            right hand side of addition
     * @return sum of lhs and rhs
     */
    public static Fraction add(Fraction lhs, Fraction rhs) {
        Fraction result = new Fraction();
        if (lhs.denominator == rhs.denominator) {
            result.setFraction(lhs.numerator + rhs.numerator, lhs.denominator);
        } else {
            result.setDenominator(lhs.denominator * rhs.denominator);
            result.setNumerator(lhs.denominator * rhs.numerator + rhs.denominator * lhs.numerator);
        }
        return result;
    }
    /**
     * Subtracts two fractions and returns a new Fraction that is their difference.
     *
     * @param lhs
     *            left hand side of subtraction
     * @param rhs
     *            right hand side of subtraction
     * @return difference of lhs and rhs
     */
    public static Fraction subtract(Fraction lhs, Fraction rhs) {
        if(lhs.denominator==0||rhs.denominator==0) { //cannot have 0 as denom.
            throw new UnsupportedOperationException();
        }
        Fraction resultFraction = new Fraction((rhs.denominator*lhs.numerator)-(lhs.denominator*rhs.numerator), (lhs.denominator*rhs.denominator));
        return resultFraction;
    }

    /**
     * Multiplies two fractions and returns a new Fraction that is their result.
     *
     * @param lhs
     *            left hand side of multiplication
     * @param rhs
     *            right hand side of multiplication
     * @return result of lhs multiplied by rhs
     */
    public static Fraction multiply(Fraction lhs, Fraction rhs) {
        Fraction result = new Fraction(lhs.getNumerator() * rhs.getNumerator(),
                lhs.getDenominator() * rhs.getDenominator());
        return result;
    }
    /**
     * Divides two fractions and returns a new Fraction that is their quotient.
     *
     * @param lhs
     *            left hand side of division
     * @param rhs
     *            right hand side of division
     * @return quotient of lhs / rhs
     */
    public static Fraction divide(Fraction lhs, Fraction rhs) {
    	 if(lhs.denominator==0||rhs.denominator==0) { //cannot have 0 as denom.
             throw new UnsupportedOperationException();
         }
         Fraction resultFraction = new Fraction((rhs.denominator*lhs.numerator), (lhs.denominator*rhs.numerator));
         return resultFraction;
    }

}